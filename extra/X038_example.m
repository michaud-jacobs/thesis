// Example computations with X_0(38)

// copy in new_models.m code

N := 38;

B := Basis(CuspForms(N));
B;
/*
[
    q + q^5 - 2*q^6 - q^7 - 2*q^8 - q^9 + 2*q^10 - 3*q^11 + O(q^12),
    q^2 - 2*q^6 - 2*q^8 + 3*q^10 + O(q^12),
    q^3 + 2*q^5 - 2*q^6 - 2*q^7 - 3*q^8 + 5*q^10 - 4*q^11 + O(q^12),
    q^4 - 3*q^5 + q^6 + 2*q^7 + 2*q^8 - q^9 - 4*q^10 + q^11 + O(q^12)
]
*/

B2, ws := all_diag_basis(38);

B2;

/*
[
    q + q^5 - 2*q^6 - q^7 - 2*q^8 - q^9 + 2*q^10 - 3*q^11 + O(q^12),
    q^2 - q^3 - q^4 + q^5 - q^6 - q^8 + q^9 + 2*q^10 + 3*q^11 + O(q^12),
    q + q^2 - q^3 + q^4 - 4*q^5 - q^6 + 3*q^7 + q^8 - 2*q^9 - 4*q^10 + 2*q^11 +
    O(q^12),
    q - 2*q^2 - 2*q^3 - 2*q^4 + 3*q^5 + 4*q^6 - q^7 + 4*q^8 + q^9 - 6*q^10 +
    3*q^11 + O(q^12)
]
*/

ws;

/*
[
    [ 1  0  0  0]
    [ 0  1  0  0]
    [ 0  0 -1  0]
    [ 0  0  0 -1],

    [-1  0  0  0]
    [ 0 -1  0  0]
    [ 0  0  1  0]
    [ 0  0  0 -1],

    [-1  0  0  0]
    [ 0 -1  0  0]
    [ 0  0 -1  0]
    [ 0  0  0  1]
]
*/



X1 := canonic(B2);
Equations(X1);
/*
[
3*x[1]^2 - 2*x[2]^2 - 2*x[3]^2 - x[4]^2,
3*x[1]^3 - 3*x[1]*x[4]^2 - 22*x[2]^3 - 10*x[2]*x[3]^2 - 2*x[2]*x[4]^2,
3*x[1]^2*x[2] - 2*x[2]^3 - 2*x[2]*x[3]^2 - x[2]*x[4]^2,
3*x[1]^2*x[3] - 2*x[2]^2*x[3] - 2*x[3]^3 - x[3]*x[4]^2,
3*x[1]^2*x[4] - 2*x[2]^2*x[4] - 2*x[3]^2*x[4] - x[4]^3,
x[1]*x[2]^2 + x[1]*x[3]^2 - x[1]*x[4]^2 - 11*x[2]^3 - 5*x[2]*x[3]^2 - x[2]*x[4]^2
]
*/

// We check if this model is nonsingular modulo some small primes:
for p in PrimesInInterval(3,17) do
    if IsSingular(ChangeRing(X1,GF(p))) then
        print p;
    end if;
end for;

// Output: 3
// So 3 is an unexpected prime of bad reduction.

// We change our equations using the Smith Normal Form transformation.

old_deg3_eqns := [e : e in Equations(X1) | Degree(e) eq 3];
d := 3;
A<[x]> := AmbientSpace(X1);
R := CoordinateRing(A);
mons := [m : m in MonomialsOfDegree(R,d)];
Coeffs := [[MonomialCoefficient(e,xx) : e in old_deg3_eqns] : xx in mons];
M := Transpose(Matrix(Integers(),Coeffs)); // Coeff matrix
SF, P, Q := SmithForm(M);
Z := P*M;
Z := ChangeRing(Z,R);
mons_mat := Matrix(#mons,1,mons);
new_deg3_eqns := Eltseq(-Z*mons_mat);
new_eqns := [R ! Equations(X1)[1]] cat new_deg3_eqns;

X := Curve(A,new_eqns);
assert X eq X1;
Equations(X1);
/*
[
    3*x[1]^2 - 2*x[2]^2 - 2*x[3]^2 - x[4]^2,
    3*x[1]^2*x[3] - 2*x[2]^2*x[3] - 2*x[3]^3 - x[3]*x[4]^2,
    3*x[1]^2*x[4] - 2*x[2]^2*x[4] - 2*x[3]^2*x[4] - x[4]^3,
    3*x[1]^2*x[2] - 2*x[2]^3 - 2*x[2]*x[3]^2 - x[2]*x[4]^2,
    3*x[1]^2*x[2] - x[1]*x[2]^2 - x[1]*x[3]^2 + x[1]*x[4]^2 + 9*x[2]^3 +
        3*x[2]*x[3]^2,
    x[1]^3 - 2*x[1]^2*x[2] - x[1]*x[4]^2 - 6*x[2]^3 - 2*x[2]*x[3]^2
]
*/

// We check if this model is nonsingular modulo some small primes:
for p in PrimesInInterval(3,17) do
    if IsSingular(ChangeRing(X,GF(p))) then
        print p;
    end if;
end for;
// The curve is now smooth mod 3,
// and still smooth for the other small primes we tested.

// We have the following 3 Atkin-Lehner involutions on X:

w2 := map<X -> X | [x[1],x[2],-x[3],-x[4]]>;
w19 := map<X -> X | [-x[1],-x[2],x[3],-x[4]]>;
w38 := map<X -> X | [-x[1],-x[2],-x[3],x[4]]>;

// We have four rational cusps:

cusps := PointSearch(X,10);
assert #cusps eq 4;



P2 := ProjectiveSpace(Rationals(),2);

proj1 := map<X -> P2 | [x[1],x[2],x[4]]>;
Y := Image(proj1);
A<[y]> := AmbientSpace(Y);
Equations(Y);
/*
[
    y[1]^3 - 5*y[1]^2*y[2] - 4*y[2]^3 - y[1]*y[3]^2 + y[2]*y[3]^2
]
*/
psi1 := map<X -> Y | [x[1],x[2],x[4]]>;
E1 := SimplifiedModel(EllipticCurve(Y,psi1(cusps[1])));
assert E1 eq EllipticCurve("38b1");

proj2 := map<X -> P2 | [x[1],x[2],x[3]]>;
Z := Image(proj2);
A<[z]> := AmbientSpace(Z);
Equations(Z);
/*
[
    z[1]^3 + z[1]^2*z[2] - z[1]*z[2]^2 + 3*z[2]^3 - z[1]*z[3]^2 + z[2]*z[3]^2
]
*/

psi2 := map<X -> Z | [x[1],x[2],x[3]]>;
E2 := SimplifiedModel(EllipticCurve(Z,psi2(cusps[1])));
assert E2 eq EllipticCurve("19a3");



// We now construct the modular parametrisation map
// We use SageMath to start:

/* E = EllipticCurve('38a1')
xq, yq = E.modular_parametrization().power_series(prec = 200)
*/

// We copy these q-expansions into Magma

L<q> := LaurentSeriesRing(Rationals());

xq := q^-2 + q^-1 - q - 3*q^2 + 2*q^3 - 13*q^4 + 27*q^5 - 34*q^6 + 15*q^7 + 10*q^8 - 36*q^9 + 82*q^10 - 149*q^11 + 281*q^12 - 389*q^13 + 451*q^14 - 289*q^15 - 138*q^16 + 783*q^17 - 1668*q^18 + 2678*q^19 - 3964*q^20 + 4994*q^21 - 4993*q^22 + 2660*q^23 + 3053*q^24 - 12300*q^25 + 24678*q^26 - 38239*q^27 + 50805*q^28 - 57142*q^29 + 48818*q^30 - 13624*q^31 - 59828*q^32 + 174683*q^33 - 322919*q^34 + 477776*q^35 - 595866*q^36 + 608712*q^37 - 422909*q^38 - 73481*q^39 + 979463*q^40 - 2313201*q^41 + 3947825*q^42 - 5539442*q^43 + 6507127*q^44 - 6021470*q^45 + 3061789*q^46 + 3421647*q^47 - 14162629*q^48 + 28965786*q^49 - 45984857*q^50 + 61000491*q^51 - 67109098*q^52 + 54963016*q^53 - 13909948*q^54 - 65596161*q^55 + 187924362*q^56 - 346190277*q^57 + 515137698*q^58 - 644638925*q^59 + 657260033*q^60 - 453316865*q^61 - 72902628*q^62 + 1002512531*q^63 - 2345362124*q^64 + 3978206334*q^65 - 5577387073*q^66 + 6565426850*q^67 - 6104407867*q^68 + 3175550567*q^69 + 3216027406*q^70 - 13683386997*q^71 + 27946063791*q^72 - 44206740929*q^73 + 58536381955*q^74 - 64485621207*q^75 + 53251171441*q^76 - 14794087533*q^77 - 59716356593*q^78 + 173919212530*q^79 - 320874460287*q^80 + 476952978027*q^81 - 596473544201*q^82 + 609493320053*q^83 - 426073482379*q^84 - 49183702960*q^85 + 889044549077*q^86 - 2100767647670*q^87 + 3571280126716*q^88 - 5009421271158*q^89 + 5902347634027*q^90 - 5512016164830*q^91 + 2944980099375*q^92 + 2669370053466*q^93 - 11865803489622*q^94 + 24394149358995*q^95 - 38678133275407*q^96 + 51292046007149*q^97 - 56645874244747*q^98 + 47150169270517*q^99 - 14186074752193*q^100 - 49806028951943*q^101 + 147933923931645*q^102 - 274265494714083*q^103 + 408645328411554*q^104 - 512193297633300*q^105 + 525543201007365*q^106 - 372584287170641*q^107 - 27195909325801*q^108 + 735105728125103*q^109 - 1757397384551177*q^110 + 2999529453691635*q^111 - 4218108656137250*q^112 + 4984849958182343*q^113 - 4684190364078021*q^114 + 2571968816935481*q^115 + 2076283242991972*q^116 - 9706437744698148*q^117 + 20115787041404533*q^118 - 32008438853678566*q^119 + 42566414498035517*q^120 - 47192855323847679*q^121 + 39649427527185523*q^122 - 12852912544596767*q^123 - 39416240363629534*q^124 + 119747170892195041*q^125 - 223366889588039770*q^126 + 333933628443675752*q^127 - 419890621931025696*q^128 + 433043689962253539*q^129 - 311591167536497805*q^130 - 9902011642070402*q^131 + 581458695211080911*q^132 - 1408808430785626941*q^133 + 2416598277457069129*q^134 - 3409785174341352688*q^135 + 4044696976345222076*q^136 - 3827047209261375335*q^137 + 2158761701182320779*q^138 + 1543669765402082003*q^139 - 7642674297239597916*q^140 + 15984671224974275459*q^141 - 25545869410687498817*q^142 + 34090597834326313724*q^143 - 37966172575241020335*q^144 + 32210028020643465063*q^145 - 11178451682697310614*q^146 - 30103679643265062997*q^147 + 93757103596294465641*q^148 - 176100168059346054595*q^149 + 264324855348195473166*q^150 - 333611417312754202415*q^151 + 345988418197090493500*q^152 - 252686856599713742751*q^153 + 1941703572062395840*q^154 + 446092445753475145691*q^155 - 1096712045139376819319*q^156 + 1891824924457338021757*q^157 - 2679651850364376736048*q^158 + 3191927916618479405474*q^159 - 3042075880109575485707*q^160 + 1761378855523524647966*q^161 + 1109157821850386639685*q^162 - 5858280103865832237991*q^163 + 12375044498546514658267*q^164 - 19872976512570797761337*q^165 + 26623407226246841542609*q^166 - 29793975677112674650926*q^167 + 25528318277031065710889*q^168 - 9428999776140816357978*q^169 - 22401836006804770792258*q^170 + 71674542665022910957616*q^171 - 135632688147380158582579*q^172 + 204478830200623887104742*q^173 - 259131498849457958404013*q^174 + 270318443972888209699344*q^175 - 200351615380370527765684*q^176 + 9087935608410938751963*q^177 + 334637991403475855912639*q^178 - 835638915219877560173754*q^179 + 1450196417668428441821065*q^180 - 2062703628766361219031836*q^181 + 2467974785870217699268892*q^182 - 2369525075824532530489328*q^183 + 1406854357635883500053909*q^184 + 774704290916002339663454*q^185 - 4401578917085824326031851*q^186 + 9396676195331763136859070*q^187 - 15168223485336253927773460*q^188 + 20404913660563583600602127*q^189 - 22950321736436234187584362*q^190 + 19860113220133641381419465*q^191 - 7765539207109060418752105*q^192 - 16338763543544862878391037*q^193 + 53813589869361808892157394*q^194 - 102641535157954526851511798*q^195 + 155463975239912857454340365*q^196 - 197861649162293104771629505*q^197;

yq := -q^-3 - 2*q^-2 - q^-1 + 1 + q + 3*q^2 - 30*q^3 + 40*q^4 - 57*q^5 + 20*q^6 + 42*q^7 - 109*q^8 + 282*q^9 - 560*q^10 + 1022*q^11 - 1388*q^12 + 1362*q^13 - 481*q^14 - 1542*q^15 + 4531*q^16 - 8819*q^17 + 14283*q^18 - 20506*q^19 + 24061*q^20 - 19704*q^21 + 679*q^22 + 38701*q^23 - 98707*q^24 + 176367*q^25 - 259677*q^26 + 327638*q^27 - 333904*q^28 + 205838*q^29 + 143465*q^30 - 785060*q^31 + 1720249*q^32 - 2852338*q^33 + 3931855*q^34 - 4530939*q^35 + 3979110*q^36 - 1371838*q^37 - 4271780*q^38 + 13633467*q^39 - 26451015*q^40 + 40896810*q^41 - 52939677*q^42 + 56027772*q^43 - 41058172*q^44 - 2783251*q^45 + 85533359*q^46 - 211729877*q^47 + 373044700*q^48 - 540098050*q^49 + 655266185*q^50 - 630165697*q^51 + 350858055*q^52 + 304366842*q^53 - 1428238217*q^54 + 3024531004*q^55 - 4924800911*q^56 + 6697661275*q^57 - 7578538814*q^58 + 6464821815*q^59 - 2026766435*q^60 - 7012334712*q^61 + 21376729244*q^62 - 40502846063*q^63 + 61616064525*q^64 - 78808673700*q^65 + 82470026376*q^66 - 59593078091*q^67 - 4426950616*q^68 + 121920281430*q^69 - 296621628565*q^70 + 515045534401*q^71 - 736591672368*q^72 + 884851171401*q^73 - 844327334625*q^74 + 468464280924*q^75 + 394316469795*q^76 - 1850836723291*q^77 + 3887449193008*q^78 - 6273364702678*q^79 + 8459208900704*q^80 - 9502497353125*q^81 + 8069286825676*q^82 - 2576154451017*q^83 - 8459442329701*q^84 + 25810139527229*q^85 - 48670376976084*q^86 + 73618603721815*q^87 - 93632245199373*q^88 + 97543969475704*q^89 - 70498261940936*q^90 - 3915187007190*q^91 + 139199316129135*q^92 - 338786026242935*q^93 + 586440725651442*q^94 - 835581719339277*q^95 + 1000349473466845*q^96 - 952990114696170*q^97 + 533692877234623*q^98 + 420231939406001*q^99 - 2019987990174509*q^100 + 4243857514462380*q^101 - 6834721973731366*q^102 + 9194894661998612*q^103 - 10312676385354395*q^104 + 8772317462974602*q^105 - 2912606522342065*q^106 - 8798618766704150*q^107 + 27126291569847409*q^108 - 51170775240102930*q^109 + 77309597580720541*q^110 - 98213132109225506*q^111 + 102336234658775741*q^112 - 74452460257418898*q^113 - 2099314358328432*q^114 + 140829907152040646*q^115 - 344846434679133412*q^116 + 597252493993814432*q^117 - 850598195258692086*q^118 + 1018246581304171412*q^119 - 972203872198077770*q^120 + 553443229886109891*q^121 + 398637844737094587*q^122 - 1992167308885991957*q^123 + 4202719130715016700*q^124 - 6773560945026745756*q^125 + 9114534697420061184*q^126 - 10233252025358984944*q^127 + 8748581142737265237*q^128 - 3048753063728004396*q^129 - 8342630839743038841*q^130 + 26149427706582244527*q^131 - 49482483977454905476*q^132 + 74833642225771818151*q^133 - 95151277244067301609*q^134 + 99380626140307772658*q^135 - 73003558217094434643*q^136 + 203139379580617031*q^137 + 131771851902068936962*q^138 - 325755226646326333811*q^139 + 565656560854865754994*q^140 - 806637773745112559098*q^141 + 967173732836018733138*q^142 - 927236517729727134894*q^143 + 538175367753708170835*q^144 + 349632382697978137818*q^145 - 1836451259463812433250*q^146 + 3899056928433761720349*q^147 - 6298907932148981189849*q^148 + 8489689984252453643342*q^149 - 9555283538281547393275*q^150 + 8223855691546042383462*q^151 - 3014638077864421377100*q^152 - 7425732894579108816234*q^153 + 23759264168950745297600*q^154 - 45173945451722495423164*q^155 + 68472979243482766816648*q^156 - 87243039945966525187157*q^157 + 91448389221813166658100*q^158 - 67931542672546682460220*q^159 + 2378976554821395833127*q^160 + 116739429321980633185015*q^161 - 292011386398314152116445*q^162 + 509015345557094936583916*q^163 - 727556540203163728811448*q^164 + 874625395958028388810698*q^165 - 842853657375896293518504*q^166 + 499403752827339516907166*q^167 + 289359681645632688884800*q^168 - 1613139351283769327740938*q^169 + 3452022711314560258503207*q^170 - 5595351137995301000089993*q^171 + 7560296521144865264309093*q^172 - 8537536626487537020045274*q^173 + 7404156071906229542660359*q^174 - 2853214521041355338841286*q^175 - 6310577288877066966412495*q^176 + 20676397976994397397457323*q^177 - 39542642425852915304814185*q^178 + 60121916059898301016562776*q^179 - 76816809461415346713138573*q^180 + 80868322531055500006227760*q^181 - 60793775755072997578952532*q^182 + 4096670385365113702231935*q^183 + 99314366776632139492015322*q^184 - 251789890367105980548407722*q^185 + 440962399582100638831389973*q^186 - 632177747428834248697356432*q^187 + 762423245787237096940382433*q^188 - 738999769307205096993413658*q^189 + 447170518340356083952239674*q^190 + 228641200454567610680513989*q^191 - 1366468048790275357916036856*q^192 + 2950501089466994019805387776*q^193 - 4801624239553873607553983207*q^194 + 6507754985354763752925857133*q^195 - 7377363302704584585692682025*q^196 ;

// We compute the modular parametrisation map
// This code works by expressing xq and yq as
// quotients of homogeneous polynomials of the same degree
// in the cusp forms of our basis B2

psi3, E3 := mod_para(X, B2, "38a1",xq,yq);

assert Degree(psi3) eq 6;
assert E3 eq EllipticCurve("38a1");
assert Domain(psi3) eq X and Codomain(psi3) eq E3;


// We now check the calculations over the field K = Q(sqrt(-26),sqrt(-7))

Rank(QuadraticTwist(E1,-26)); // 1 true
Rank(QuadraticTwist(E2,-26)); // 2 true
Rank(QuadraticTwist(E3,-26)); // 0 true

// So E1(K) and E2(K) have positive rank
// We verify that E3 has rank 0 over K
L := QuadraticField(-26);
E3L := ChangeRing(E3,L);
Rank(QuadraticTwist(E3L,-7)); // 0 true

// We check that E3(K) = E3(Q)
K := Compositum(L, QuadraticField(-7));
E3K := ChangeRing(E3,K);
assert #TorsionSubgroup(E3K) eq 3;

pts := PointSearch(E3,1);
assert #pts eq 3;
// We have found all K points of E

// We now compute the preimage of these points

for P in pts do
    preim := Decomposition(Pullback(psi3,Place(P)));
    for place in preim do
        M := ResidueClassField(place[1]);
        if AbsoluteDegree(M) gt 1 then
            print AbsoluteDegree(M), Discriminant(AbsoluteOrder(Integers(M)));
        else print 1, 1;
        end if;
    end for;
end for;

// We obtain the following output:

/*
4 513
1 1
1 1
4 513
1 1
1 1
3 -76
3 -76
*/

// We see that no points are defined over K, since
assert AbsoluteDiscriminant(Integers(K)) eq 529984;
